generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  brand_id Int        @id @default(autoincrement())
  name     String     @unique(map: "name") @db.VarChar(80)
  products products[]
}

model categories {
  category_id Int        @id @default(autoincrement())
  name        String     @unique(map: "name") @db.VarChar(80)
  description String?    @db.VarChar(200)
  products    products[]
}

model customers {
  customer_id Int      @id @default(autoincrement())
  full_name   String   @db.VarChar(150)
  phone       String?  @db.VarChar(40)
  email       String?  @db.VarChar(120)
  tax_id      String?  @db.VarChar(30)
  address     String?  @db.VarChar(200)
  created_at  DateTime @default(now()) @db.DateTime(0)
  sales       sales[]

  @@index([full_name], map: "ix_customers_name")
}

model inventory_movements {
  movement_id    BigInt                              @id @default(autoincrement())
  product_id     Int
  movement_type  inventory_movements_movement_type
  reference_type inventory_movements_reference_type?
  reference_id   Int?
  qty            Decimal                             @db.Decimal(18, 3)
  unit_cost      Decimal?                            @db.Decimal(12, 2)
  unit_price     Decimal?                            @db.Decimal(12, 2)
  notes          String?                             @db.VarChar(200)
  created_at     DateTime                            @default(now()) @db.DateTime(0)
  products       products                            @relation(fields: [product_id], references: [product_id], onDelete: NoAction, map: "fk_inv_mov_product")

  @@index([product_id], map: "ix_inv_mov_product")
}

model payment_methods {
  payment_method_id Int        @id @default(autoincrement())
  code              String     @unique(map: "code") @db.VarChar(20)
  name              String     @db.VarChar(60)
  payments          payments[]
}

model payments {
  payment_id        Int             @id @default(autoincrement())
  sale_id           Int
  payment_method_id Int
  amount            Decimal         @db.Decimal(12, 2)
  ref_number        String?         @db.VarChar(80)
  paid_at           DateTime        @default(now()) @db.DateTime(0)
  received_by       Int?
  payment_methods   payment_methods @relation(fields: [payment_method_id], references: [payment_method_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_method")
  sales             sales           @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade, map: "fk_payments_sale")
  users             users?          @relation(fields: [received_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_payments_user")

  @@index([payment_method_id], map: "fk_payments_method")
  @@index([sale_id], map: "fk_payments_sale")
  @@index([received_by], map: "fk_payments_user")
}

model products {
  product_id          Int                   @id @default(autoincrement())
  sku                 String                @unique(map: "sku") @db.VarChar(40)
  name                String                @db.VarChar(150)
  category_id         Int?
  brand_id            Int?
  unit_id             Int
  barcode             String?               @unique(map: "barcode") @db.VarChar(60)
  description         String?               @db.VarChar(500)
  cost_price          Decimal               @default(0.00) @db.Decimal(12, 2)
  sale_price          Decimal               @default(0.00) @db.Decimal(12, 2)
  is_taxable          Boolean               @default(true)
  min_stock           Decimal               @default(0.000) @db.Decimal(18, 3)
  created_at          DateTime              @default(now()) @db.DateTime(0)
  inventory_movements inventory_movements[]
  brands              brands?               @relation(fields: [brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_brand")
  categories          categories?           @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_category")
  units               units                 @relation(fields: [unit_id], references: [unit_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_unit")
  purchase_items      purchase_items[]
  sale_items          sale_items[]

  @@index([unit_id], map: "fk_products_unit")
  @@index([brand_id], map: "ix_products_brand")
  @@index([category_id], map: "ix_products_category")
  @@index([name], map: "ix_products_name")
}

model purchase_items {
  purchase_item_id Int       @id @default(autoincrement())
  purchase_id      Int
  product_id       Int
  qty              Decimal   @db.Decimal(18, 3)
  unit_cost        Decimal   @db.Decimal(12, 2)
  tax_rate         Decimal   @default(12.00) @db.Decimal(5, 2)
  line_subtotal    Decimal?  @db.Decimal(12, 2)
  line_tax         Decimal?  @db.Decimal(12, 2)
  products         products  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchase_items_product")
  purchases        purchases @relation(fields: [purchase_id], references: [purchase_id], onDelete: Cascade, map: "fk_purchase_items_purchase")

  @@index([product_id], map: "fk_purchase_items_product")
  @@index([purchase_id], map: "ix_purch_items_purchase")
}

model purchases {
  purchase_id    Int              @id @default(autoincrement())
  supplier_id    Int
  invoice_number String?          @db.VarChar(60)
  purchase_date  DateTime         @default(dbgenerated("(curdate())")) @db.Date
  status         purchases_status @default(RECEIVED)
  subtotal       Decimal          @default(0.00) @db.Decimal(12, 2)
  tax_amount     Decimal          @default(0.00) @db.Decimal(12, 2)
  total          Decimal?         @db.Decimal(12, 2)
  created_by     Int?
  created_at     DateTime         @default(now()) @db.DateTime(0)
  purchase_items purchase_items[]
  suppliers      suppliers        @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchases_supplier")
  users          users?           @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_purchases_user")

  @@index([supplier_id], map: "fk_purchases_supplier")
  @@index([created_by], map: "fk_purchases_user")
}

model roles {
  role_id     Int          @id @default(autoincrement())
  name        String       @unique(map: "name") @db.VarChar(50)
  description String?      @db.VarChar(200)
  created_at  DateTime     @default(now()) @db.DateTime(0)
  user_roles  user_roles[]
}

model sale_items {
  sale_item_id  Int      @id @default(autoincrement())
  sale_id       Int
  product_id    Int
  qty           Decimal  @db.Decimal(18, 3)
  unit_price    Decimal  @db.Decimal(12, 2)
  discount_amt  Decimal  @default(0.00) @db.Decimal(12, 2)
  line_subtotal Decimal? @db.Decimal(12, 2)
  line_total    Decimal? @db.Decimal(12, 2)
  products      products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sale_items_product")
  sales         sales    @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade, map: "fk_sale_items_sale")

  @@index([product_id], map: "fk_sale_items_product")
  @@index([sale_id], map: "ix_sale_items_sale")
}

model sales {
  sale_id        Int           @id @default(autoincrement())
  customer_id    Int?
  status         sales_status  @default(CART)
  channel        sales_channel @default(POS)
  tax_rate       Decimal       @default(12.00) @db.Decimal(5, 2)
  subtotal       Decimal       @default(0.00) @db.Decimal(12, 2)
  tax_amount     Decimal       @default(0.00) @db.Decimal(12, 2)
  discount_total Decimal       @default(0.00) @db.Decimal(12, 2)
  total          Decimal?      @db.Decimal(12, 2)
  created_by     Int?
  created_at     DateTime      @default(now()) @db.DateTime(0)
  updated_at     DateTime      @default(now()) @db.DateTime(0)
  payments       payments[]
  sale_items     sale_items[]
  customers      customers?    @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sales_customer")
  users          users?        @relation(fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sales_user")

  @@index([customer_id], map: "fk_sales_customer")
  @@index([created_by], map: "fk_sales_user")
}

model suppliers {
  supplier_id  Int         @id @default(autoincrement())
  name         String      @unique(map: "name") @db.VarChar(150)
  contact_name String?     @db.VarChar(120)
  phone        String?     @db.VarChar(40)
  email        String?     @db.VarChar(120)
  tax_id       String?     @db.VarChar(30)
  address      String?     @db.VarChar(200)
  created_at   DateTime    @default(now()) @db.DateTime(0)
  purchases    purchases[]
}

model units {
  unit_id  Int        @id @default(autoincrement())
  code     String     @unique(map: "code") @db.VarChar(10)
  name     String     @db.VarChar(40)
  products products[]
}

model user_roles {
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now()) @db.DateTime(0)
  roles       roles    @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "fk_user_roles_role")
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_user_roles_user")

  @@id([user_id, role_id])
  @@index([role_id], map: "fk_user_roles_role")
}

model users {
  user_id       Int          @id @default(autoincrement())
  full_name     String       @db.VarChar(120)
  email         String       @unique(map: "email") @db.VarChar(120)
  password_hash String       @db.VarChar(255)
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now()) @db.DateTime(0)
  payments      payments[]
  purchases     purchases[]
  sales         sales[]
  user_roles    user_roles[]
}

enum inventory_movements_movement_type {
  IN_PURCHASE
  OUT_SALE
  ADJUST_POS
  ADJUST_NEG
  RETURN_SALE
  RETURN_PURCHASE
}

enum sales_status {
  CART
  PLACED
  PAID
  CANCELLED
  FULFILLED
}

enum inventory_movements_reference_type {
  PURCHASE
  SALE
  ADJUSTMENT
}

enum sales_channel {
  POS
  WEB
}

enum purchases_status {
  DRAFT
  RECEIVED
  CANCELLED
}
